import swaggerAutogen from "swagger-autogen";
import { expressOptions } from "../env.js";

const docConfig = {
  openapi: "3.0.0",
  info: {
    version: "1.0.0",
    title: "BidsHandler API Documentation (OpenAPIv3)",
    description: "Documentation automatically generated by the <b>swagger-autogen</b> module.",
  },
  servers: [
    {
      url: `http://${expressOptions.host}:${expressOptions.port}`,
      description: "API server",
    },
  ],
  tags: [
    {
      name: "Greeting",
      description: "Start page of the API",
    },
    {
      name: "Reg&Auth",
      description: "Registration & authentication end-points",
    },
    {
      name: "Users",
      description: "Users' profile end-points",
    },
    {
      name: "Bids&Comments",
      description: "Bids end-points",
    },
    {
      name: "Redirect",
      description: "Redirect to the API home page",
    },
  ],
  components: {
    "@schemas": {
      RequestSignUpSchema: {
        type: "object",
        required: ["username", "email", "password"],
        properties: {
          username: {
            type: "string",
            example: "John_Doe",
            description: "Users username",
          },
          firstName: {
            type: "string",
            example: "John",
            description: "Users First name",
          },
          lastName: {
            type: "string",
            example: "Doe",
            description: "Users Last name",
          },
          email: {
            type: "string",
            example: "QKx0o@example.com",
            description: "Users email",
          },
          password: {
            type: "string",
            example: "12345678",
            description: "Users password",
          },
          gender: {
            type: "string",
            example: "male",
            description: "Users gender",
          },
          isAdmin: {
            type: "boolean",
            example: true,
            description: "Users role",
          },
          avatar: {
            type: "string",
            format: "binary",
            description: "Users avatar file in multipart",
          },
        },
      },
      RequestSignInSchema: {
        type: "object",
        required: ["password"],
        oneOf: [
          {
            required: ["username"],
            properties: {
              username: {
                type: "string",
                example: "John_Doe",
                description: "Users username",
              },
            },
          },
          {
            required: ["email"],
            properties: {
              email: {
                type: "string",
                example: "QKx0o@example.com",
                description: "Users email",
              },
            },
          },
        ],
        properties: {
          password: {
            type: "string",
            example: "12345678",
            description: "Users password",
          },
        },
      },
      RequestUpdateProfileSchema: {
        type: "object",
        required: [],
        properties: {
          username: {
            type: "string",
            example: "John_Doe",
            description: "Users username",
          },
          firstName: {
            type: "string",
            example: "John",
            description: "Users First name",
          },
          lastName: {
            type: "string",
            example: "Doe",
            description: "Users Last name",
          },
          gender: {
            type: "string",
            example: "male",
            description: "Users gender",
          },
          isAdmin: {
            type: "boolean",
            example: true,
            description: "Users role",
          },
          avatar: {
            type: "string",
            format: "binary",
            description: "Users avatar file in multipart",
          },
        },
      },
      RequestRestoreProfileSchema: {
        type: "object",
        required: ["password"],
        oneOf: [
          {
            required: ["username"],
            properties: {
              username: {
                type: "string",
                example: "John_Doe",
                description: "Users username",
              },
            },
          },
          {
            required: ["email"],
            properties: {
              email: {
                type: "string",
                example: "QKx0o@example.com",
                description: "Users email",
              },
            },
          },
        ],
        properties: {
          password: {
            type: "string",
            example: "12345678",
            description: "Users password",
          },
        },
      },
      RequestCreateBidSchema: {
        type: "object",
        required: ["message"],
        properties: {
          message: {
            type: "string",
            example: "Bid message",
            description: "Bid message",
          },
        },
      },
      ResponseSuccessfulAuthenticationRefreshSchema: {
        type: "object",
        required: ["accessToken"],
        properties: {
          accessToken: {
            type: "string",
            example: "eyJhbGciOiJIUz...",
            description: "Access token",
          },
        },
      },
      ResponseUserProfileSchema: {
        type: "object",
        required: [
          "id",
          "username",
          "first_name",
          "last_name",
          "email",
          "gender",
          "avatar",
          "isAdmin",
          "createdAt",
          "updatedAt",
          "deletedAt",
        ],
        properties: {
          id: {
            type: "string",
            example: "2d77c5c4-f3d3-4723-b793-f5ba38bfe5eb",
            description: "Users id (uuidv4)",
          },
          username: {
            type: "string",
            example: "John_Doe",
            description: "Users username",
          },
          first_name: {
            type: "string",
            example: "John",
            description: "Users First name",
          },
          last_name: {
            type: "string",
            example: "Doe",
            description: "Users Last name",
          },
          email: {
            type: "string",
            example: "QKx0o@example.com",
            description: "Users email",
          },
          gender: {
            type: "string",
            example: "male",
            description: "Users gender",
          },
          avatar: {
            type: "string",
            example: "uploads/avatars/avatar-2d77c5c4-f3d3-4723-b793-f5ba38bfe5eb.png",
            description: "Users avatar",
          },
          isAdmin: {
            type: "boolean",
            example: true,
            description: "Users role",
          },
          createdAt: {
            type: "string",
            example: "2022-01-01T00:00:00.000Z",
            description: "Users creation date",
          },
          updatedAt: {
            type: "string",
            example: "2022-01-01T00:00:00.000Z",
            description: "Users last update date",
          },
          deletedAt: {
            type: "string",
            example: "2022-01-01T00:00:00.000Z",
            description: "Users soft deletion date",
          },
        },
      },
      Response400Schema: {
        type: "object",
        required: ["message"],
        properties: {
          message: {
            type: "string",
            example: "Bad Request",
            description: "Error message",
          },
        },
      },
      Response401Schema: {
        type: "object",
        required: ["message"],
        properties: {
          message: {
            type: "string",
            example: "Unauthorized!",
            description: "Error message",
          },
        },
      },
      Response404Schema: {
        type: "object",
        required: ["message"],
        properties: {
          message: {
            type: "string",
            example: "Not found!",
            description: "Error message",
          },
        },
      },
    },
  },
};

const outputFile = "../docs/swagger-output.json";
const endpointsFiles = ["../server.js"];

swaggerAutogen({
  openapi: "3.0.0",
})(outputFile, endpointsFiles, docConfig);
