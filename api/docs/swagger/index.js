// --------------------------------------OPENAPI_CONFIG
const path = require('path');
const swaggerAutogen = require('swagger-autogen')({ openapi: '3.0.0' });
const dotenv = require('dotenv');
dotenv.config({ path: '../../../.env' });
// const swaggerConverter = require('swagger2openapi');

// --------------------------------------FILES AND ENDPOINTS DESTINATIONS
const outputFile = path.join(__dirname, 'swagger-output.json');
const endpointsFiles = [path.join(__dirname, '../../routes/router.js'), path.join(__dirname, '../../server.js')];

// --------------------------------------GENERATE DOCUMENTATION
const documentation = {
	info: {
		version: '1.0.0',
		title: 'RequestHandler API Documentation (OpenAPIv3)',
		description: 'Documentation automatically generated by the <b>swagger-autogen</b> module.',
	},
	servers: [
		{
			url: `http://${process.env.SERVER_HOST ?? '127.0.0.1'}:3000/api/v1`,
			description: 'API server',
		},
	],
	tags: [
		{
			name: 'Reg&Auth',
			description: 'Registration & authentication end-points',
		},
		{
			name: 'Users requests',
			description: 'Users requests end-points',
		},
		{
			name: 'Greeting',
			description: "API's greeting html-page end-point",
		},
	],
	components: {
		securitySchemes: {
			bearerAuth_schema: {
				type: 'http',
				scheme: 'bearer',
				// bearerFormat: 'JWT',
			},
		},
		'@schemas': {
			Error401_schema: {
				type: 'object',
				required: ['message'],
				properties: {
					message: {
						type: 'string',
						format: 'string',
						examples: 'Unauthorized. User is not authenticated',
						description: 'Error message of the unauthorized response',
					},
				},
			},
			Error403_schema: {
				type: 'object',
				required: ['message'],
				properties: {
					message: {
						type: 'string',
						format: 'string',
						example: 'Forbidden',
						description: 'Error message of the forbidden response',
					},
				},
			},
			Error413_schema: {
				type: 'object',
				required: ['message'],
				properties: {
					message: {
						type: 'string',
						format: 'string',
						example: 'File size is too big. Should be less than 10 MB.',
						description: 'Error message of the payload too large response',
					},
				},
			},
			Error415_schema: {
				type: 'object',
				required: ['message'],
				properties: {
					message: {
						type: 'string',
						format: 'string',
						example: 'Incorrect file format for avatar. Only .png, .jpg and .jpeg formats are allowed!',
						description: 'Error message of the unsupported media type response',
					},
				},
			},
			Error422_schema: {
				type: 'object',
				required: ['message'],
				properties: {
					message: {
						type: 'string',
						format: 'string',
						example: 'Unprocessable Entity',
						description: 'Error message of the unprocessable entity response',
					},
				},
			},
			Error500_schema: {
				type: 'object',
				required: ['message'],
				properties: {
					message: {
						type: 'string',
						format: 'string',
						example: 'Internal server error',
						description: 'Error message of the internal server error response',
					},
				},
			},
			UserProfile_schema: {
				type: 'object',
				required: ['username', 'email', 'first_name', 'last_name', 'avatar', 'created_at', 'role'],
				properties: {
					username: {
						type: 'string',
						format: 'string',
						example: 'Ronald10',
						description: 'Username in the system',
					},
					email: {
						type: 'string',
						format: 'string',
						example: 'ronald123@example.com',
						description: 'Users email',
					},
					first_name: {
						type: 'string',
						format: 'string',
						example: 'Ronald',
						description: 'Users First name',
					},
					last_name: {
						type: 'string',
						format: 'string',
						example: 'Doe',
						description: 'Users Last name',
					},
					avatar: {
						type: 'string',
						format: 'string',
						example: '/avatar.png',
						description: 'Users avatar',
					},
					created_at: {
						type: 'string',
						format: 'date-time',
						example: '2021-01-01T00:00:00.000Z',
						description: 'Users creation date',
					},
					role: {
						type: 'string',
						format: 'string',
						example: 'user',
						description: 'Users role',
					},
				},
			},
			SignInWithEmail_schema: {
				type: 'object',
				required: ['password', 'email'],
				properties: {
					password: {
						type: 'string',
						format: 'string',
						example: 'ronald123',
						description: 'Users password',
					},
					email: {
						type: 'string',
						format: 'string',
						example: 'ronald123@example.com',
						description: 'Users email',
					},
					username: {
						type: 'string',
						format: 'string',
						example: 'ronald10',
						description: 'Users username',
					},
				},
			},
			SignInWithUsername_schema: {
				type: 'object',
				required: ['password', 'username'],
				properties: {
					password: {
						type: 'string',
						format: 'string',
						example: 'ronald123',
						description: 'Users password',
					},
					username: {
						type: 'string',
						format: 'string',
						example: 'ronald10',
						description: 'Users username',
					},
					email: {
						type: 'string',
						format: 'string',
						example: 'ronald123@example.com',
						description: 'Users email',
					},
				},
			},
			SignUp_schema: {
				type: 'object',
				required: ['username', 'email', 'password'],
				properties: {
					username: {
						type: 'string',
						format: 'string',
						example: 'ronald10',
						description: 'Users username',
					},
					email: {
						type: 'string',
						format: 'string',
						example: 'ronald123@example.com',
						description: 'Users email',
					},
					password: {
						type: 'string',
						format: 'string',
						example: 'ronald123',
						description: 'Users password',
					},
					first_name: {
						type: 'string',
						format: 'string',
						example: 'Ronald',
						description: 'Users First name',
					},
					last_name: {
						type: 'string',
						format: 'string',
						example: 'Doe',
						description: 'Users Last name',
					},
					role: {
						type: 'string',
						format: 'string',
						example: 'user',
						description: 'Users role',
						enum: ['admin', 'user'],
					},
					avatar: {
						type: 'string',
						format: 'binary',
						description: 'Users avatar',
					},
				},
			},
			CreateRequest_schema: {
				type: 'object',
				required: ['message'],
				properties: {
					message: {
						type: 'string',
						format: 'string',
						example:
							'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Voluptate est fugit inventore vero! Animi odio iure quasi doloremque! Odio ducimus quidem enim unde animi nostrum, ad inventore quia laboriosam beatae?',
						description: 'Message of the users request response',
					},
				},
			},
			GetRequests_schema: {
				type: 'object',
				parameters: [
					{
						in: 'query',
						name: 'page',
						description: 'Page number',
						required: false,
						type: 'integer',
					},
				],
				required: ['request_status'],
				properties: {
					request_status: {
						type: 'string',
						format: 'string',
						example: 'active',
						description: 'Request status',
						enum: ['active', 'resolved'],
					},
				},
			},
			Request_schema: {
				type: 'object',
				required: ['id', 'status', 'message', 'comment', 'created_at', 'updated_at', 'created_by', 'resolved_by'],
				properties: {
					id: {
						type: 'integer',
						format: 'integer',
						example: 1,
						description: 'Request id',
					},
					status: {
						type: 'string',
						format: 'string',
						example: 'active',
						description: 'Request status',
						enum: ['active', 'resolved'],
					},
					message: {
						type: 'string',
						format: 'string',
						example: 'Ipsam quasi, est esse, saepe incidunt adipisci nam hic velit laudantium itaque nisi!',
						description: 'Request message',
					},
					comment: {
						type: 'string',
						format: 'string',
						example: 'Ipsam quasi, est esse, saepe incidunt adipisci nam hic velit laudantium itaque nisi!',
						description: 'Admins comment to the resolved request',
					},
					created_at: {
						type: 'string',
						format: 'date-time',
						example: '2022-01-01T00:00:00.000Z',
						description: 'Request creation date',
					},
					updated_at: {
						type: 'string',
						format: 'date-time',
						example: '2022-01-01T00:00:00.000Z',
						description: 'Request update date',
					},
					created_by: {
						type: 'integer',
						format: 'integer',
						example: 1,
						description: 'Request creator id',
					},
					resolved_by: {
						type: 'integer',
						format: 'integer',
						example: 1,
						description: 'Request resolver id',
					},
				},
			},
			PageInfo_schema: {
				type: 'object',
				required: ['currentPage', 'itemsPerPage', 'totalItems', 'totalPages', 'nextPage', 'previousPage'],
				properties: {
					currentPage: {
						type: 'integer',
						format: 'integer',
						example: 1,
						description: 'Current page',
					},
					itemsPerPage: {
						type: 'integer',
						format: 'integer',
						example: 10,
						description: 'Limit of items per page',
					},
					totalItems: {
						type: 'integer',
						format: 'integer',
						example: 100,
						description: 'Total items count',
					},
					totalPages: {
						type: 'integer',
						format: 'integer',
						example: 10,
						description: 'Total pages count',
					},
					nextPage: {
						type: 'integer',
						format: 'integer',
						example: 2,
						description: 'Next page number',
					},
					previousPage: {
						type: 'integer',
						format: 'integer',
						example: 0,
						description: 'Previous page number',
					},
				},
			},
			GetRequestsResponse_schema: {
				type: 'object',
				required: ['data', 'pageInfo'],
				properties: {
					data: {
						type: 'array',
						items: {
							$ref: '#/components/schemas/Request_schema',
						},
					},
					pageInfo: {
						$ref: '#/components/schemas/PageInfo_schema',
					},
				},
			},
		},
	},
};
swaggerAutogen(outputFile, endpointsFiles, documentation).then((result) => {
	console.log(`Swagger generation complete: ${result.success}`);
	// swaggerConverter.convertFile(outputFile, {}, function (err, result) {
	// 	if (err) {
	// 		console.log(err);
	// 	} else {
	// 		fs.writeFile(path.join(__dirname, 'swagger-output-3.json'), JSON.stringify(result.openapi), function (err) {
	// 			if (err) {
	// 				console.log(err);
	// 			}
	// 		});
	// 	}
	// });
});
