{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "RequestHandler API Documentation (OpenAPIv3)",
    "description": "Documentation automatically generated by the <b>swagger-autogen</b> module."
  },
  "servers": [
    {
      "url": "http://127.0.0.1:3000/api/v1",
      "description": "API server"
    }
  ],
  "tags": [
    {
      "name": "Reg&Auth",
      "description": "Registration & authentication end-points"
    },
    {
      "name": "Users requests",
      "description": "Users requests end-points"
    },
    {
      "name": "Greeting",
      "description": "API's greeting html-page end-point"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Greeting"
        ],
        "summary": "Greeting HTML-page end-point.",
        "description": "This is a base greeting HTML-page of the API, \twhere you can learn more about it purpose and get links to the documentation and source code on GitHub.com",
        "operationId": "greeting",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "format": "html",
                  "example": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<title>Document</title>\n</head>\n<body>\n\t<h1>Hello, world!</h1>\n</body>\n</html>",
                  "description": "Greeting HTML-page"
                }
              }
            }
          }
        }
      }
    },
    "/signup": {
      "post": {
        "tags": [
          "Reg&Auth"
        ],
        "summary": "Sign up end-point.",
        "description": "This is the end-point for the registration of new users in the system. Both users and admins can use it.",
        "operationId": "signup",
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "examples": "User signed up successfully!",
                      "description": "Message of the successful signup of the user response"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "examples": "Invalid role. Should be \"user\" or \"admin\".",
                      "description": "Error message of the bad request response"
                    }
                  }
                }
              }
            }
          },
          "413": {
            "description": "Payload too large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error413_schema"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error415_schema"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error422_schema"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500_schema"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SignUp_schema"
              }
            }
          }
        }
      }
    },
    "/signin": {
      "post": {
        "tags": [
          "Reg&Auth"
        ],
        "summary": "Sign in end-point.",
        "description": "This is the end-point for the signing in of registered users in the system.",
        "operationId": "signin",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "message",
                    "token_access",
                    "token_refresh"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "User signed in successfully!",
                      "description": "Message of the successful sign in response"
                    },
                    "token_access": {
                      "type": "string",
                      "format": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR...",
                      "description": "Access token for the signed in user"
                    },
                    "token_refresh": {
                      "type": "string",
                      "format": "string",
                      "example": "eyJhbGciOjJIUzI1NiIsInR...",
                      "description": "Refresh token for the signed in user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401_schema"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error422_schema"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500_schema"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SignInWithEmail_schema"
                  },
                  {
                    "$ref": "#/components/schemas/SignInWithUsername_schema"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/signout": {
      "get": {
        "tags": [
          "Reg&Auth"
        ],
        "summary": "Sign out end-point.",
        "description": "This is the end-point for the signing out of registered users in the system and blacklisting their refresh tokens permanently.",
        "operationId": "signout",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "User signed out successfully!",
                      "description": "Message of the successful sign out response"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401_schema"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error422_schema"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500_schema"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/refresh": {
      "get": {
        "tags": [
          "Reg&Auth"
        ],
        "summary": "Refresh of the access token end-point.",
        "description": "This is the end-point for the refreshing of the access token of registered users in the system.",
        "operationId": "refresh",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "message",
                    "token_access"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Access token has been successfully refresh!",
                      "description": "Message of the successful refresh of the access token response"
                    },
                    "token_access": {
                      "type": "string",
                      "format": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR...",
                      "description": "Access token of the user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401_schema"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error422_schema"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500_schema"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/profile": {
      "get": {
        "tags": [
          "Reg&Auth"
        ],
        "summary": "User profile end-point.",
        "description": "This is the end-point for the user profile of registered users in the system.",
        "operationId": "profile",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile_schema"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error422_schema"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500_schema"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/requests": {
      "get": {
        "tags": [
          "Users requests"
        ],
        "summary": "Get all requests by User end-point.",
        "description": "This is the end-point for getting all requests by User.",
        "operationId": "getRequests",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/PageInQuery_schema"
          },
          {
            "$ref": "#/components/parameters/LimitInQuery_schema"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRequestsResponse_schema"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403_schema"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error422_schema"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500_schema"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetRequests_schema"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users requests"
        ],
        "summary": "Create a new request by User end-point.",
        "description": "This is the end-point for creating a new request by User.",
        "operationId": "createRequest",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Request created successfully!",
                      "description": "Message of the successful creation of the request response"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403_schema"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error422_schema"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500_schema"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequest_schema"
              }
            }
          }
        }
      }
    },
    "/requests/{id}": {
      "put": {
        "tags": [
          "Users requests"
        ],
        "summary": "Resolve request by admin end-point.",
        "description": "This is the end-point for resolving requests by admins.",
        "operationId": "resolveRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/IDInPath_schema"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Request with ID: ___ was resolved successfully! Email reply was sent to user email.",
                      "description": "Success message of resolved request"
                    },
                    "email_reply": {
                      "type": "string",
                      "format": "string",
                      "example": "https://ethereal.email/message/Z...",
                      "description": "Link to successful email reply to the user response. Here is used Ethereal email service for testing purposes."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403_schema"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Request with ID: ___ not found or doesn't exist.",
                      "description": "Error message of not found request"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error422_schema"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500_schema"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "comment"
                ],
                "properties": {
                  "comment": {
                    "type": "string",
                    "format": "string",
                    "example": "Admin's resolution comment: ...",
                    "description": "Admin's comment of the resolved request"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users requests"
        ],
        "summary": "Delete request by admin end-point.",
        "description": "This is the end-point for deleting requests by admins.",
        "operationId": "deleteRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/IDInPath_schema"
          },
          {
            "name": "authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Request with ID: ${request_id} was deleted successfully!",
                      "description": "Success message of the deleted request response"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403_schema"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Request with ID: ___ not found or doesn't exist.",
                      "description": "Error message of the not found response"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error422_schema"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500_schema"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth_schema": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "parameters": {
      "IDInPath_schema": {
        "in": "path",
        "name": "id",
        "description": "Request id",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "integer",
          "example": 1
        }
      },
      "PageInQuery_schema": {
        "in": "query",
        "name": "page",
        "description": "Page number",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "integer",
          "example": 1
        }
      },
      "LimitInQuery_schema": {
        "in": "query",
        "name": "limit",
        "description": "Limit of items per page",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "integer",
          "example": 10
        }
      }
    },
    "schemas": {
      "Error401_schema": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "format": "string",
            "examples": "Unauthorized. User is not authenticated",
            "description": "Error message of the unauthorized response"
          }
        }
      },
      "Error403_schema": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "format": "string",
            "example": "Forbidden",
            "description": "Error message of the forbidden response"
          }
        }
      },
      "Error413_schema": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "format": "string",
            "example": "File size is too big. Should be less than 10 MB.",
            "description": "Error message of the payload too large response"
          }
        }
      },
      "Error415_schema": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "format": "string",
            "example": "Incorrect file format for avatar. Only .png, .jpg and .jpeg formats are allowed!",
            "description": "Error message of the unsupported media type response"
          }
        }
      },
      "Error422_schema": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "format": "string",
            "example": "Unprocessable Entity",
            "description": "Error message of the unprocessable entity response"
          }
        }
      },
      "Error500_schema": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "format": "string",
            "example": "Internal server error",
            "description": "Error message of the internal server error response"
          }
        }
      },
      "UserProfile_schema": {
        "type": "object",
        "required": [
          "username",
          "email",
          "first_name",
          "last_name",
          "avatar",
          "created_at",
          "role"
        ],
        "properties": {
          "username": {
            "type": "string",
            "format": "string",
            "example": "Ronald10",
            "description": "Username in the system"
          },
          "email": {
            "type": "string",
            "format": "string",
            "example": "ronald123@example.com",
            "description": "Users email"
          },
          "first_name": {
            "type": "string",
            "format": "string",
            "example": "Ronald",
            "description": "Users First name"
          },
          "last_name": {
            "type": "string",
            "format": "string",
            "example": "Doe",
            "description": "Users Last name"
          },
          "avatar": {
            "type": "string",
            "format": "string",
            "example": "/avatar.png",
            "description": "Users avatar"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2021-01-01T00:00:00.000Z",
            "description": "Users creation date"
          },
          "role": {
            "type": "string",
            "format": "string",
            "example": "user",
            "description": "Users role"
          }
        }
      },
      "SignInWithEmail_schema": {
        "type": "object",
        "required": [
          "password",
          "email"
        ],
        "properties": {
          "password": {
            "type": "string",
            "format": "string",
            "example": "ronald123",
            "description": "Users password"
          },
          "email": {
            "type": "string",
            "format": "string",
            "example": "ronald123@example.com",
            "description": "Users email"
          },
          "username": {
            "type": "string",
            "format": "string",
            "example": "ronald10",
            "description": "Users username"
          }
        }
      },
      "SignInWithUsername_schema": {
        "type": "object",
        "required": [
          "password",
          "username"
        ],
        "properties": {
          "password": {
            "type": "string",
            "format": "string",
            "example": "ronald123",
            "description": "Users password"
          },
          "username": {
            "type": "string",
            "format": "string",
            "example": "ronald10",
            "description": "Users username"
          },
          "email": {
            "type": "string",
            "format": "string",
            "example": "ronald123@example.com",
            "description": "Users email"
          }
        }
      },
      "SignUp_schema": {
        "type": "object",
        "required": [
          "username",
          "email",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string",
            "format": "string",
            "example": "ronald10",
            "description": "Users username"
          },
          "email": {
            "type": "string",
            "format": "string",
            "example": "ronald123@example.com",
            "description": "Users email"
          },
          "password": {
            "type": "string",
            "format": "string",
            "example": "ronald123",
            "description": "Users password"
          },
          "first_name": {
            "type": "string",
            "format": "string",
            "example": "Ronald",
            "description": "Users First name"
          },
          "last_name": {
            "type": "string",
            "format": "string",
            "example": "Doe",
            "description": "Users Last name"
          },
          "role": {
            "type": "string",
            "format": "string",
            "example": "user",
            "description": "Users role",
            "enum": [
              "admin",
              "user"
            ]
          },
          "avatar": {
            "type": "string",
            "format": "binary",
            "description": "Users avatar"
          }
        }
      },
      "CreateRequest_schema": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "format": "string",
            "example": "Lorem ipsum dolor sit amet consectetur, adipisicing elit. Voluptate est fugit inventore vero! Animi odio iure quasi doloremque! Odio ducimus quidem enim unde animi nostrum, ad inventore quia laboriosam beatae?",
            "description": "Message of the users request response"
          }
        }
      },
      "GetRequests_schema": {
        "type": "object",
        "required": [
          "request_status"
        ],
        "properties": {
          "request_status": {
            "type": "string",
            "format": "string",
            "example": "active",
            "description": "Request status",
            "enum": [
              "active",
              "resolved"
            ]
          }
        }
      },
      "Request_schema": {
        "type": "object",
        "required": [
          "id",
          "status",
          "message",
          "comment",
          "created_at",
          "updated_at",
          "created_by",
          "resolved_by"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "integer",
            "example": 1,
            "description": "Request id"
          },
          "status": {
            "type": "string",
            "format": "string",
            "example": "active",
            "description": "Request status",
            "enum": [
              "active",
              "resolved"
            ]
          },
          "message": {
            "type": "string",
            "format": "string",
            "example": "Ipsam quasi, est esse, saepe incidunt adipisci nam hic velit laudantium itaque nisi!",
            "description": "Request message"
          },
          "comment": {
            "type": "string",
            "format": "string",
            "example": "Ipsam quasi, est esse, saepe incidunt adipisci nam hic velit laudantium itaque nisi!",
            "description": "Admins comment to the resolved request"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-01-01T00:00:00.000Z",
            "description": "Request creation date"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-01-01T00:00:00.000Z",
            "description": "Request update date"
          },
          "created_by": {
            "type": "integer",
            "format": "integer",
            "example": 1,
            "description": "Request creator id"
          },
          "resolved_by": {
            "type": "integer",
            "format": "integer",
            "example": 1,
            "description": "Request resolver id"
          }
        }
      },
      "PageInfo_schema": {
        "type": "object",
        "required": [
          "currentPage",
          "itemsPerPage",
          "totalItems",
          "totalPages",
          "nextPage",
          "previousPage"
        ],
        "properties": {
          "currentPage": {
            "type": "integer",
            "format": "integer",
            "example": 1,
            "description": "Current page"
          },
          "itemsPerPage": {
            "type": "integer",
            "format": "integer",
            "example": 10,
            "description": "Limit of items per page"
          },
          "totalItems": {
            "type": "integer",
            "format": "integer",
            "example": 100,
            "description": "Total items count"
          },
          "totalPages": {
            "type": "integer",
            "format": "integer",
            "example": 10,
            "description": "Total pages count"
          },
          "nextPage": {
            "type": "integer",
            "format": "integer",
            "example": 2,
            "description": "Next page number"
          },
          "previousPage": {
            "type": "integer",
            "format": "integer",
            "example": 0,
            "description": "Previous page number"
          }
        }
      },
      "GetRequestsResponse_schema": {
        "type": "object",
        "required": [
          "data",
          "pageInfo"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Request_schema"
            }
          },
          "pageInfo": {
            "$ref": "#/components/schemas/PageInfo_schema"
          }
        }
      }
    }
  }
}